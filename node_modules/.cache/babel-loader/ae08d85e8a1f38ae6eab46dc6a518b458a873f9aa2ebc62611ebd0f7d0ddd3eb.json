{"ast":null,"code":"\"use strict\";\n\n/**\n * Returns a Promise that resolves to the value of window.ethereum if it is\n * set within the given timeout, or null.\n * The Promise will not reject, but an error will be thrown if invalid options\n * are provided.\n *\n * @param options - Options bag.\n * @param options.mustBeMetaMask - Whether to only look for MetaMask providers.\n * Default: false\n * @param options.silent - Whether to silence console errors. Does not affect\n * thrown errors. Default: false\n * @param options.timeout - Milliseconds to wait for 'ethereum#initialized' to\n * be dispatched. Default: 3000\n * @returns A Promise that resolves with the Provider if it is detected within\n * given timeout, otherwise null.\n */\nfunction detectEthereumProvider() {\n  let {\n    mustBeMetaMask = false,\n    silent = false,\n    timeout = 3000\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  _validateInputs();\n  let handled = false;\n  return new Promise(resolve => {\n    if (window.ethereum) {\n      handleEthereum();\n    } else {\n      window.addEventListener('ethereum#initialized', handleEthereum, {\n        once: true\n      });\n      setTimeout(() => {\n        handleEthereum();\n      }, timeout);\n    }\n    function handleEthereum() {\n      if (handled) {\n        return;\n      }\n      handled = true;\n      window.removeEventListener('ethereum#initialized', handleEthereum);\n      const {\n        ethereum\n      } = window;\n      if (ethereum && (!mustBeMetaMask || ethereum.isMetaMask)) {\n        resolve(ethereum);\n      } else {\n        const message = mustBeMetaMask && ethereum ? 'Non-MetaMask window.ethereum detected.' : 'Unable to detect window.ethereum.';\n        !silent && console.error('@metamask/detect-provider:', message);\n        resolve(null);\n      }\n    }\n  });\n  function _validateInputs() {\n    if (typeof mustBeMetaMask !== 'boolean') {\n      throw new Error(`@metamask/detect-provider: Expected option 'mustBeMetaMask' to be a boolean.`);\n    }\n    if (typeof silent !== 'boolean') {\n      throw new Error(`@metamask/detect-provider: Expected option 'silent' to be a boolean.`);\n    }\n    if (typeof timeout !== 'number') {\n      throw new Error(`@metamask/detect-provider: Expected option 'timeout' to be a number.`);\n    }\n  }\n}\nmodule.exports = detectEthereumProvider;","map":{"version":3,"names":["detectEthereumProvider","mustBeMetaMask","silent","timeout","arguments","length","undefined","_validateInputs","handled","Promise","resolve","window","ethereum","handleEthereum","addEventListener","once","setTimeout","removeEventListener","isMetaMask","message","console","error","Error","module","exports"],"sources":["../src/index.ts"],"sourcesContent":[null],"mappings":";;AAYA;;;;;;;;;;;;;;;;AAgBA,SAASA,sBAAsBA,CAAA,EAIzB;EAAA,IAJ0B;IAC9BC,cAAc,GAAG,KAAK;IACtBC,MAAM,GAAG,KAAK;IACdC,OAAO,GAAG;EAAI,CACf,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAEJG,eAAe,EAAE;EAEjB,IAAIC,OAAO,GAAG,KAAK;EAEnB,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAI;IAC7B,IAAIC,MAAM,CAACC,QAAQ,EAAE;MAEnBC,cAAc,EAAE;KAEjB,MAAM;MAELF,MAAM,CAACG,gBAAgB,CACrB,sBAAsB,EACtBD,cAAc,EACd;QAAEE,IAAI,EAAE;MAAI,CAAE,CACf;MAEDC,UAAU,CAAC,MAAK;QACdH,cAAc,EAAE;MAClB,CAAC,EAAEV,OAAO,CAAC;;IAGb,SAASU,cAAcA,CAAA;MAErB,IAAIL,OAAO,EAAE;QACX;;MAEFA,OAAO,GAAG,IAAI;MAEdG,MAAM,CAACM,mBAAmB,CAAC,sBAAsB,EAAEJ,cAAc,CAAC;MAElE,MAAM;QAAED;MAAQ,CAAE,GAAGD,MAAM;MAE3B,IAAIC,QAAQ,KAAK,CAACX,cAAc,IAAIW,QAAQ,CAACM,UAAU,CAAC,EAAE;QACxDR,OAAO,CAACE,QAAQ,CAAC;OAClB,MAAM;QAEL,MAAMO,OAAO,GAAGlB,cAAc,IAAIW,QAAQ,GACtC,wCAAwC,GACxC,mCAAmC;QAEvC,CAACV,MAAM,IAAIkB,OAAO,CAACC,KAAK,CAAC,4BAA4B,EAAEF,OAAO,CAAC;QAC/DT,OAAO,CAAC,IAAI,CAAC;;IAEjB;EACF,CAAC,CAAC;EAEF,SAASH,eAAeA,CAAA;IACtB,IAAI,OAAON,cAAc,KAAK,SAAS,EAAE;MACvC,MAAM,IAAIqB,KAAK,CAAC,8EAA8E,CAAC;;IAEjG,IAAI,OAAOpB,MAAM,KAAK,SAAS,EAAE;MAC/B,MAAM,IAAIoB,KAAK,CAAC,sEAAsE,CAAC;;IAEzF,IAAI,OAAOnB,OAAO,KAAK,QAAQ,EAAE;MAC/B,MAAM,IAAImB,KAAK,CAAC,sEAAsE,CAAC;;EAE3F;AACF;AAlFAC,MAAA,CAAAC,OAAA,GAASxB,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}